=pod

=head1 NAME

FLTK::run - Basic activity functions for the Fast Light Toolkit

=head1 Description



=head1 Functions

=head2 C<add_check>
X<add_check>

=over

=item C<FLTK::add_check( \&coderef, $args );>X<FLTK_add_check_coderef_args_>

FLTK will call this callback just before it flushes the display and waits for
events. This is different than L<C<add_idle()>|/"add_idle"> because it is only
called once, then fltk calls the system and tells it not to return until an
event happens. If several checks have been added fltk calls them all, the most
recently added one first.

This can be used by code that wants to monitor the application's state, such
as to keep a display up to date. The advantage of using a check callback is
that it is called only when no events are pending. If events are coming in
quickly, whole blocks of them will be processed before this is called once.
This can save significant time and avoid the application falling behind the
events:

    my $state_changed;   # anything that changes the display turns this on
    sub check {
        return if !$state_changed;
        $state_changed = 0;
        do_expensive_calculation();
        $widget->redraw();
    }
    FLTK::add_check(\&check);
    FLTK::run();

Import this function with the C<:run> tag.

=for hackers xs/run.xs line 432

=back

=head2 C<add_fd>
X<add_fd>

=over

=item C<my $handle = FLTK::add_fd( $fh, $events, \&callback, $args );>X<my_handle_FLTK_add_fd_fh_events_callback_args_>

Adds a handle to the list watched by FLTK.

C<$events> may be any combination of the following:

=over 

=item * C<FLTK::READ>: The callback is triggered whenever there is data to be
read.

Listening sockets trigger this when a new incoming connection is attempted.

=item * C<FLTK::WRITE>: The callback is triggered whenever the filehandle or
socket is ready to accept new data.

=item * C<FLTK::EXCEPT>: The callback is triggered whenever the filehandle or
socket is encounters an exception.

=back 

...these constants are exported through the C<:fd> tag.

The callback is called with the filehandle as the first argument and any data
in C<args> as the second argument. It is called in response to user events,
but exactly when depends on the widget. For instance a button calls it when
the button is released.

B<NOTE>: To make use of callbacks, your perl must be recent enough to support
weak references.

Import this function with the C<:fd> tag.

=for hackers xs/run.xs line 565

=back

=head2 C<add_idle>
X<add_idle>

=over

=item C<FLTK::add_idle( \&coderef, $args );>X<FLTK_add_idle_coderef_args_>

Adds a callback function that is called every time by
L<C<FLTK::wait()>|FLTK/"wait"> and also makes it act as though the timeout is
zero (this makes L<C<FLTK::wait()>|FLTK/"wait"> return immediately, so if it
is in a loop it is called repeatedly, and thus the idle fucntion is called
repeatedly). The idle function can be used to get background processing done.

You can have multiple idle callbacks. They are called one after another in a
round-robin fashion, checking for events between each.

L<C<FLTK::wait()>|FLTK/"wait"> and L<C<FLTK::check()>|FLTK/"check"> call idle
callbacks, but L<C<FLTK::ready()>|FLTK/"ready"> does not.

The idle callback can call any FLTK functions, including
L<C<FLTK::wait()>|FLTK/"wait">, L<C<FLTK::check()>|FLTK/"check">, and
L<C<FLTK::ready()>|FLTK/"ready">. In this case fltk will not recursively call
the idle callback.

Import this function with the C<:run> tag.

=for hackers xs/run.xs line 462

=back

=head2 C<add_timeout>
X<add_timeout>

=over

=item C<FLTK::add_timeout( $time, \&callback, $args );>X<FLTK_add_timeout_time_callback_args_>

Add a one-shot timeout callback. The function will be called by
L<C<fltk::wait()>|FLTK/"wait"> at C<time> seconds after this function is
called. The optional C<args> are passed to the callback.

Import this function with the C<:run> tag.

=for hackers xs/run.xs line 308

=back

=head2 C<check>
X<check>

=over

=item C<my $return = FLTK::check( );>X<my_return_FLTK_check_>

Same as  L<C<FLTK::wait(0)>|/"wait">. Calling this during a big calculation
will keep the screen up to date and the interface responsive:

    while (!calculation_done()) {
        calculate();
        FLTK::check();
        last if user_hit_abort_button();
    }

Import this function with the C<:run> tag.

=for hackers xs/run.xs line 144

=back

=head2 C<damage>
X<damage>

=over

=item C<my $needs_redraw = FLTK::damage( );>X<my_needs_redraw_FLTK_damage_>

True if any L<C<FLTK::Widget::redraw()>|FLTK::Widget/"redraw"> calls have been
done since the last L<C<FLTK::flush()>|FLTK/"flush">. This indicates that
L<C<flush()>|FLTK/"flush"> will do something. Currently the meaning of any
bits are undefined.

Window L<C<flush()>|FLTK/"flush"> routines can set this to indicate that
L<C<flush()>|FLTK/"flush"> should be called again after waiting for more
events. This is useful in some instances such as X windows that are waiting
for a mapping event before being drawn.

=for hackers xs/run.xs line 244

=item C<FLTK::damage( $d );>X<FLTK_damage_d_>

Sets L<C<damage()>|/"damage"> to C<d>.

Import this function with the C<:run> tag.

=for hackers xs/run.xs line 256

=back

=head2 C<display>
X<display>

=over

=item C<FLTK::display( $d );>X<FLTK_display_d_>

Startup method to set what C<X> display to use. This uses C<setenv()> to
change the C<DISPLAY> environment variable, so it will affect programs that
are exec'd by this one.

This does some "uglification" required by C<X>. If there is no colon in the
string it appends ":0.0" to it. Thus a plain machine name may be used.

On non-C<X> systems this sets the environment variable anyway, even though it
probably will not affect the display used. It appears that putenv is missing
on some versions of Windows so I commented it all out there, sigh.

=for hackers Found in F<fltk/setdisplay.cxx>

Import this function with the C<:run> tag.

=for hackers xs/run.xs line 38

=back

=head2 C<enable_tablet_events>
X<enable_tablet_events>

=over

=item C<my $okay = FLTK::enable_tablet_events( );>X<my_okay_FLTK_enable_tablet_events_>

Call this to indicate that you are interested in getting more information from
a pen tablet device. It does some necessary overhead to enable tablets on C<X>
and Windows. In the future FLTK may do this automatically without you calling
this.

If a tablet is detected, L<C<FLTK::event_pressure()>|/"event_pressure"> will
return the pen pressure as a float value between C<0> and C<1>. Some tablets
also support L<C<event_x_tilt()>|/"event_x_tilt"> and
L<C<event_y_tilt()>|/"event_y_tilt">.

Import this function with the C<:run> tag.

=for hackers xs/run.xs line 67

=back

=head2 C<flush>
X<flush>

=over

=item C<FLTK::flush( );>X<FLTK_flush_>

Get the display up to date. This is done by calling L<C<layout()>|/"layout">
on all Window objects with L<C<layout_damage()>|/"layout_damage"> and then
calling L<C<draw()>|/"draw"> on all Window objects with
L<C<damage()>|/"damage">. (actually it calls
L<C<FLTK::Window::flush()>|FLTK::Window/"flush"> and that calls
L<C<draw()>|/"draw">, but normally you can ignore this). This will also flush
the C<X> i/o buffer, update the cursor shape, update Windows' window sizes,
and other operations to get the display up to date.

L<C<wait()>|/"wait"> calls this before it waits for events.

Import this function with the C<:run> tag.

=for hackers xs/run.xs line 211

=back

=head2 C<get_time_secs>
X<get_time_secs>

=over

=item C<my $time = FLTK::get_time_secs( );>X<my_time_FLTK_get_time_secs_>

Return portable time that increases by C<1.0> each second.

On Windows it represents the time since system start, on Unixes, it's the
C<gettimeofday()>.

Using a double, the numerical precision exceeds C<1/1040000> even for the Unix
gettimeofday value (which is seconds since 1970). However you should only
store the C<difference> between these values in a float.

The precision of the returned value depends on the OS, but the minimum
precision is 20ms.

Import this function with the C<:run> tag.

=for hackers xs/run.xs line 280

=back

=head2 C<ready>
X<ready>

=over

=item C<my $actions = FLTK::ready( );>X<my_actions_FLTK_ready_>

Test to see if any events or callbacks are pending. This will return true if
L<C<FLTK::check()>|/"check"> would do anything other than update the screen.
Since this will not draw anything or call any code, it is safe to call this if
your program is in an inconsistent state. This is also useful if your
calculation is updating widgets but you do not want or need the overhead of
the screen updating every time you check for events.

    while (!calculation_done()) {
        calculate();
        if (FLTK::ready()) {
            do_expensive_cleanup();
            FLTK::check();
            last if user_hit_abort_button();
        }
    }

Import this function with the C<:run> tag.

=for hackers xs/run.xs line 155

=back

=head2 C<redraw>
X<redraw>

=over

=item C<FLTK::redraw( );>X<FLTK_redraw_>

Redraws all widgets. This is a good idea if you have made global changes to
the styles.

Import this function with the C<:run> tag.

=for hackers xs/run.xs line 206

=back

=head2 C<remove_fd>
X<remove_fd>

=over

=item C<FLTK::remove_fd( $fh, $when );>X<FLTK_remove_fd_fh_when_>

Removes a handle from the list watched by FLTK.

The optional C<$when> argument may be any combination of the following:

=over 

=item * C<FLTK::READ>: The callback is triggered whenever there is data to be
read.

Listening sockets trigger this when a new incoming connection is attempted.

=item * C<FLTK::WRITE>: The callback is triggered whenever the filehandle or
socket is ready to accept new data.

=item * C<FLTK::EXCEPT>: The callback is triggered whenever the filehandle or
socket is encounters an exception.

=back 

...these constants are exported through the C<:fd> tag.

By default, the filehandle is removed completly which is the same as passing
C<-1>.

=pod 

Import this function with the C<:fd> tag.

=for hackers xs/run.xs line 631

=back

=head2 C<remove_idle>
X<remove_idle>

=over

=item C<FLTK::remove_idle( \&coderef, $args );>X<FLTK_remove_idle_coderef_args_>

Removes the specified idle callback, if it is installed.

Import this function with the C<:run> tag.

=for hackers xs/run.xs line 481

=back

=head2 C<repeat_timeout>
X<repeat_timeout>

=over

=item C<FLTK::repeat_timeout( $timeout );>X<FLTK_repeat_timeout_timeout_>

Similar to L<C<add_timeout()>|/"add_timeout">, but rather than the time being
measured from "now", it is measured from when the system call elapsed that
caused this timeout to be called. This will result in far more accurate
spacing of the timeout callbacks, it also has slightly less system call
overhead. (It will also use all your machine time if your timeout code and
fltk's overhead take more than t seconds, as the real timeout will be reduced
to zero).

Outside a timeout callback this acts like L<C<add_timeout()>|/"add_timeout">.

This code will print "TICK" each second on C<*STDOUT>, with a fair degree of
accuracy:

    my $ticker;
    $ticker = FLTK::add_timeout(
        1,
        sub {
            say('TICK');
            FLTK::repeat_timeout(1, $ticker);
        }
    );
    FLTK::wait() while 1;

Import this function with the C<:run> tag.

=for hackers xs/run.xs line 314

=back

=head2 C<run>
X<run>

=over

=item C<my $return = FLTK::run( );>X<my_return_FLTK_run_>

Calls L<C<FLTK::wait()>|/"wait"> as long as any windows are not closed. When
all the windows are hidden or destroyed (checked by seeing if
L<C<FLTK::Window::first()>|FLTK::Window/"first"> is undef) this will return with
zero. A program can also exit by having a callback call C<exit>.

Most FLTK programs will end with C<exit FLTK::run();>.

Import this function with the C<:run> or C<:default> tags.

=for hackers xs/run.xs line 135

=back

=head2 C<wait>
X<wait>

=over

=item C<my $events = FLTK::wait( );>X<my_events_FLTK_wait_>

Same as L<C<FLTK::wait(infinity)>|/"wait">. Call this repeatedly to "run" your
program. You can also check what happened each time after this returns, which
is quite useful for managing program state.

Import this function with the C<:run> tag.

=for hackers xs/run.xs line 95

=item C<my $events = FLTK::wait( $time_to_wait );>X<my_events_FLTK_wait_time_to_wait_>

Waits until "something happens", or the given time interval passes. It can
return much sooner than the time if something happens.

What this really does is call all idle callbacks, all elapsed timeouts, call
L<C<FLTK::flush()>|/"flush"> to get the screen to update, and then wait some
time (zero if there are idle callbacks, the shortest of all pending timeouts,
or the given time), for any events from the user or any
L<C<FLTK::add_fd()>|/"add_fd"> callbacks. It then handles the events and calls
the callbacks and then returns.

The return value is zero if nothing happened before the passed C<time_to_wait>
expired. It is non-zero if any events or timeouts came in.

Import this function with the C<:run> tag.

=for hackers xs/run.xs line 101

=back

=head1 Author

Sanko Robinson <sanko@cpan.org> - http://sankorobinson.com/

=head1 License and Legal

Copyright (C) 2008-2010 by Sanko Robinson <sanko@cpan.org>

This program is free software; you can redistribute it and/or modify it under
the terms of
L<The Artistic License 2.0|http://www.perlfoundation.org/artistic_license_2_0>.
See the F<LICENSE> file included with this distribution or
L<notes on the Artistic License 2.0|http://www.perlfoundation.org/artistic_2_0_notes>
for clarification.

When separated from the distribution, all original POD documentation is
covered by the
L<Creative Commons Attribution-Share Alike 3.0 License|http://creativecommons.org/licenses/by-sa/3.0/us/legalcode>.
See the
L<clarification of the CCA-SA3.0|http://creativecommons.org/licenses/by-sa/3.0/us/>.


=for git $Id: run.xs 0f9e351 2011-07-02 22:44:19Z sanko@cpan.org $

=cut
