=pod

=head1 NAME

FLTK::Browser - Subclass of FLTK::Menu

=head1 Description

Displays a scrolling vertical list of text widgets, possibly with a
hierarchical arrangement, and lets the user select one of them.

The items may be created as child widgets (usually the same widgets as are
used to create menus: L<FLTK::Item|FLTK::Item> widgets, or
L<FLTK::ItemGroup|FLTK::ItemGroup> widgets to make a hierarchy).

All the functions used to add, remove, or modify items in the list are defined
by the base class L<FLTK::Menu|FLTK::Menu>. See that for much more
information. For a simple constant list you can populate the list by calling
C<browser->add("text of item")> once for each item.

See also:

=over 8

=item C<add()>

=item C<add_group()>

=item C<add_leaf()>

=back 

You can also use an L<FLTK::List|FLTK::List> which allows you to control the
storage by dynamically creating a temporary "fake" widget for the browser to
use each time it wants to look at or draw an item. This is useful for creating
browsers with hundreds of thousands of items, or when the set of items changes
rapidly.

If you give the browser a callback you can find out what item was selected
with L<C<value()>|FLTK::Browser/"value">, the first item is zero (this is
different from older versions of fltk that started at C<1>!), and will be
negative if no item is selected. You can change the selected item with
L<C<value(new_value)>|FLTK::Browser/"value">.

The subclass L<FLTK::MultiBrowser|FLTK::MultiBrowser> lets the user select
more than one item at the same time.

The L<C<callback()>|FLTK::Widget/"callback"> is done when the user changes the
selected items or when they open/close parents. In addition, if the user
double-clicks a non-parent item, then it is "executed" which usually means
that the L<C<callback()>|FLTK::Widget/"callback"> on the item itself is run.
However, if no callback has been set on the item, the
L<C<callback()>|FLTK::Widget/"callback"> of this widget is called with the
L<C<user_data()>|FLTK::Widget/"user_data"> of the item.

You can control when callbacks are done with the
L<C<when()>|FLTK::Widget/"when"> method. The following values are useful, the
default value is C<FLTK::WHEN_CHANGED>.

=over 8

=item C<FLTK::WHEN_NEVER>

Callback is never done. L<C<changed()>|FLTK::Widget/"changed"> can be used to
see if the user has modified the browser.

=item C<FLTK::WHEN_CHANGED>

Callback is called on every change to each item as it happens. The method
L<C<item()>|GLFK::Group/"item">) will return the one that is being changed.
Notice that selecting large numbers in a mulit browser will produce large
numbers of callbacks.

=item C<FLTK::WHEN_RELEASE>

Callback is done when the user releases the mouse after some changes, and on
any keystroke that changes the item. For a multi browser you will only be able
to find out all the changes by scanning all the items in the callback.

=item C<FLTK::WHEN_RELEASE_ALWAYS>

Callback is done when the user releases the mouse even if the current item has
not changed, and on any arrow keystroke even when at the top or bottom of the
browser.

=item C<FLTK::WHEN_ENTER_KEY>

If you turn this on then the enter key is a shortcut and executes the current
item like double-click.

=back 

=head1 Functions

=head2 C<BOTTOM>
X<BOTTOM>

=over

=item C<BOTTOM( );>X<BOTTOM_>

Position current item to bottom

=for hackers These are internal to Browser so we don't export them and don't
put them in the top level.

=for hackers xs/Browser.xs line 225

=back

=head2 C<IS_MULTI>
X<IS_MULTI>

=over

=item C<IS_MULTI( );>X<IS_MULTI_>

Means multiple selection can be achieved by user.

=for hackers xs/Browser.xs line 172

=back

=head2 C<MIDDLE>
X<MIDDLE>

=over

=item C<MIDDLE( );>X<MIDDLE_>

Position current item to middle

=for hackers xs/Browser.xs line 221

=back

=head2 C<MULTI>
X<MULTI>

=over

=item C<MULTI( );>X<MULTI_>

Means multiple selection can be achieved by user.

=for hackers xs/Browser.xs line 180

=back

=head2 C<NORMAL>
X<NORMAL>

=over

=item C<NORMAL( );>X<NORMAL_>

Means a single selection can be achieved by user.

=for hackers xs/Browser.xs line 176

=back

=head2 C<NOSCROLL>
X<NOSCROLL>

=over

=item C<NOSCROLL( );>X<NOSCROLL_>

Argument to L<C<make_item_visible()>|/"make_item_visible">.

Moves as little as possible so item is visible.

=for hackers xs/Browser.xs line 211

=back

=head2 C<NO_COLUMN_SELECTED>
X<NO_COLUMN_SELECTED>

=over

=item C<NO_COLUMN_SELECTED( );>X<NO_COLUMN_SELECTED_>

Means that no column has been selected by user.

=for hackers These are internal to Browser so we don't export them and don't
put them in the top level.

=for hackers xs/Browser.xs line 184

=back

=head2 C<TOP>
X<TOP>

=over

=item C<TOP( );>X<TOP_>

Position current item to top

=for hackers xs/Browser.xs line 217

=back

=head2 C<at_mark>
X<at_mark>

=over

=item C<my $position = $browser-E<gt>at_mark( $mark );>X<my_position_browser_E_gt_at_mark_mark_>



=for hackers xs/Browser.xs line 516

=back

=head2 C<bottomline>
X<bottomline>

=over

=item C<$browser-E<gt>bottomline( $line );>X<_browser_E_gt_bottomline_line_>

Convenience function for non-hierarchial browsers. Make the indexed item
visible and scroll to put it at the bottom of the browser.

=for hackers xs/Browser.xs line 1036

=back

=head2 C<box_height>
X<box_height>

=over

=item C<my $h = $browser-E<gt>box_height( );>X<my_h_browser_E_gt_box_height_>

The height of the display area of the browser in pixels, this is
L<C<h()>|/"h"> minus the edges of the L<C<box()>|/"box"> minus the height of
the horizontal scrollbar, if visible. If this is changed (by resizing the
widget, adding or deleting items or opening or closing a parent item such that
the scrollbar visibility changes) then L<C<layout()>|/"layout"> must be called
before this is correct.

=for hackers xs/Browser.xs line 273

=back

=head2 C<box_width>
X<box_width>

=over

=item C<my $w = $browser-E<gt>box_width( );>X<my_w_browser_E_gt_box_width_>

The width of the display area of the browser in pixels, this is L<C<w()>|/"w">
minus the edges of the L<C<box()>|/"box"> minus the width of the vertical
scrollbar, if visible. If this is changed (by resizing the widget, adding or
deleting items or opening or closing a parent item such that the scrollbar
visibility changes) then L<C<layout()>|/"layout"> must be called before this
is correct.

=for hackers xs/Browser.xs line 264

=back

=head2 C<column_labels>
X<column_labels>

=over

=item C<my @labels = $browser-E<gt>column_labels( );>X<my_labels_browser_E_gt_column_labels_>

Get the list of labels at the top of browser.

=for hackers xs/Browser.xs line 923

=item C<$browser-E<gt>column_labels( $col1, ..., $col );>X<_browser_E_gt_column_labels_col1_col_>

Set the list of labels to put at the top of the browser. The initial sizes of
them are set with L<C<column_widths()>|/"column_widths">. Items in the browser
can print into the correct columns by putting C<\t> characters into their
text. Or they can look at L<C<FLTK::column_widths()>|FLTK/"column_widths"> to
find the settings from their L<C<draw()>|/"draw"> methods.

=for hackers xs/Browser.xs line 927

=back

=head2 C<column_widths>
X<column_widths>

=over

=item C<my @widths = $browser-E<gt>column_widths( );>X<my_widths_browser_E_gt_column_widths_>



=for hackers xs/Browser.xs line 857

=item C<$browser-E<gt>column_widths( $col1, ..., $col );>X<_browser_E_gt_column_widths_col1_col_>

Sets the horizontal locations that each C<'\t'> character in an item should
start printing text at. These are measured from the left edge of the browser,
including any area for the open/close + glyphs.

You can define flexible column by setting column width to -1. If you have
flexible column in browser, all columns are resized to match width of the
browser, by resizing flexible column.

X<zero width column list termination>
Note that a zero (C<0>) will terminate the list of columns.

=over 

=item Example 1

  @widths   = [ 100, 100, 100 ];

Make three columns, total width of columns is 300 pixels. Columns are
resizable, but total width is kept always.

=item Example 2

  @widths = [ 100, 100, -1 ];

Make three columns, total width of columns is always width of the browser.
Columns are resizable, third column is flexible and will take remaining space
left.

=item Example 3

  @widths = [ 250, 250, 0, 400 ];

Make two columns, total width of columns is 500 pixels. Columns are resizable,
but total width is kept always.

=back 

=for hackers xs/Browser.xs line 861

=back

=head2 C<compare_to_mark>
X<compare_to_mark>

=over

=item C<my $difference = $browser-E<gt>compare_to_mark( $mark );>X<my_difference_browser_E_gt_compare_to_mark_mark_>



=for hackers xs/Browser.xs line 529

=back

=head2 C<current_index>
X<current_index>

=over

=item C<my @indexes = $browser-E<gt>current_index( );>X<my_indexes_browser_E_gt_current_index_>

Return an array of C<L<current_level()|/"current_level">+1> indexes saying
which child at each level includes the current item.

=for hackers xs/Browser.xs line 827

=back

=head2 C<current_level>
X<current_level>

=over

=item C<my $level = $browser-E<gt>current_level( );>X<my_level_browser_E_gt_current_level_>

Return the nesting level of the current item (how many parents it has).

=for hackers xs/Browser.xs line 781

=back

=head2 C<current_position>
X<current_position>

=over

=item C<my $y = $browser-E<gt>current_position( );>X<my_y_browser_E_gt_current_position_>

Return the C<y> position, in pixels, of the top edge of the current item. You
may also want the height, which is in L<C<item_h()>|/"item_h">.

=for hackers xs/Browser.xs line 785

=back

=head2 C<damage_item>
X<damage_item>

=over

=item C<$browser-E<gt>damage_item( $mark );>X<_browser_E_gt_damage_item_mark_>

Set item referenced by this mark as being damaged.

=for hackers xs/Browser.xs line 733

=item C<$browser-E<gt>damage_item( );>X<_browser_E_gt_damage_item_>

Tell the browser to redraw the current item. Do this if you know it has
changed appearance. This is better than redrawing the entire browser because
it will blink a lot less.

=for hackers xs/Browser.xs line 737

=back

=head2 C<default_style>
X<default_style>

=over

=item C<my $style = $browser-E<gt>default_style( );>X<my_style_browser_E_gt_default_style_>

Get the style

=for hackers xs/Browser.xs line 149

=item C<$browser-E<gt>default_style( $style );>X<_browser_E_gt_default_style_style_>

Set the style.

=for hackers xs/Browser.xs line 153

=back

=head2 C<deselect>
X<deselect>

=over

=item C<my $okay = $browser-E<gt>deselect( $do_callback );>X<my_okay_browser_E_gt_deselect_do_callback_>

Turn off selection of all items in the browser. For the normal (not
L<Multi|FLTK::MultiBrowser>) L<Browser|FLTK::Browser>, this puts it in a
special state where nothing is highlighted and L<C<index(0)>|/"index"> returns
C<-1>. The user cannot get it into this state with the GUI.

For a L<MultiBrowser|FLTK::MultiBrowser> the user can get this state by
C<ctrl+click>ing the selected items off.

If C<do_callback> has some bits that are also in L<C<when()>|/"when"> then the
callback is done for each item that changes selected state.

=for hackers xs/Browser.xs line 678

=back

=head2 C<display>
X<display>

=over

=item C<my $visible = $browser-E<gt>display( $line, $value );>X<my_visible_browser_E_gt_display_line_value_>

Convenience function for non-hierarchial browsers. Make the indexed item be
L<C<visible()>|/"visible"> and scroll the browser so it can be seen by the
user.

=for hackers xs/Browser.xs line 1070

=back

=head2 C<display_lines>
X<display_lines>

=over

=item C<my $display = $browser-E<gt>display_lines( );>X<my_display_browser_E_gt_display_lines_>

Accessor (get) method which returns a true value if lines should be displayed,
or a false value otherwize.

=for hackers xs/Browser.xs line 1081

=item C<$browser-E<gt>display_lines( $display );>X<_browser_E_gt_display_lines_display_>

Accessor (set) method which is used to set the value of the C<displaylines_>
member. If you set C<display> to a false value, it will mean that you do not
want lines of the tree to be displayed.

=for hackers xs/Browser.xs line 1086

=back

=head2 C<displayed>
X<displayed>

=over

=item C<my $visible = $browser-E<gt>displayed( $line );>X<my_visible_browser_E_gt_displayed_line_>

Convenience function for non-hierarchial browsers. Make the indexed item
visible and scroll to put it at the bottom of the browser.

=for hackers xs/Browser.xs line 1060

=back

=head2 C<focus_index>
X<focus_index>

=over

=item C<my @indexes = $browser-E<gt>focus_index( );>X<my_indexes_browser_E_gt_focus_index_>

Return an array of L<C<focus_level()>|/"focus_level">C<+1> indexes saying
which child at each level includes the focus.

=for hackers xs/Browser.xs line 832

=back

=head2 C<focus_level>
X<focus_level>

=over

=item C<my $level = $browser-E<gt>focus_level( );>X<my_level_browser_E_gt_focus_level_>

Return the nesting level of the focus (how many parents it has). The focus is
the selected item the user sees.

=for hackers xs/Browser.xs line 790

=back

=head2 C<focus_position>
X<focus_position>

=over

=item C<my $y = $browser-E<gt>focus_position( );>X<my_y_browser_E_gt_focus_position_>

Return the C<y> position, in pixels, of the top edge of the focus item. You
may also want the height, which is in L<C<goto_focus()>|/"goto_focus">C<; >
L<C<item_h()>|/"item_h">.

=for hackers xs/Browser.xs line 795

=back

=head2 C<goto_focus>
X<goto_focus>

=over

=item C<my $focus = $browser-E<gt>goto_focus( );>X<my_focus_browser_E_gt_goto_focus_>

Sets the L<C<item()>|/"item"> to the "focus" (the item with the dotted square
in an L<FLTK::MultiBrowser|FLTK::MultiBrowser>, and the selected item in a
normal L<FLTK::Browser|FLTK::Browser>.

=for hackers xs/Browser.xs line 398

=back

=head2 C<goto_index>
X<goto_index>

=over

=item C<my $current = $browser-E<gt>goto_index( $index, $level );>X<my_current_browser_E_gt_goto_index_index_level_>

Go to a nested item. indexes must contain C<level+1> index numbers. The first
number indicates the top-level item number, the second indicates the child
number of that parent, and so on. This sets the current L<C<item()>|/"item">
to the given item and also returns it. If the values are out of range then
C<undef> is returned.

A negative number in C<indexes[0]> will make it go into a special no-item
state where L<C<select_only_this()>|/"select_only_this"> will do
L<C<deselect()>|/"deselect">.

=for hackers xs/Browser.xs line 461

=item C<my $current = $browser-E<gt>goto_index( $index );>X<my_current_browser_E_gt_goto_index_index_>

Go to the C<index>'th item in the top level. If C<index> is out of range,
C<undef> is returned.

=for hackers xs/Browser.xs line 473

=item C<my $current = $browser-E<gt>goto_index( $index, $level, $deep, $deeper, $deepest );>X<my_current_browser_E_gt_goto_index_index_level_deep_deeper_deepest_>

Go to an item at any level up to 5. Negative numbers indicate that no more
levels should be looked at.

=for hackers xs/Browser.xs line 478

=back

=head2 C<goto_mark>
X<goto_mark>

=over

=item C<my $current = $browser-E<gt>goto_mark( $mark );>X<my_current_browser_E_gt_goto_mark_mark_>

Set current item to a particular mark.

=for hackers xs/Browser.xs line 503

=back

=head2 C<goto_position>
X<goto_position>

=over

=item C<my $current = $browser-E<gt>goto_position( $y );>X<my_current_browser_E_gt_goto_position_y_>

Set the current L<C<item()>|/"item"> to the last one who's top is at or before
C<Y> pixels from the top.

=for hackers xs/Browser.xs line 447

=back

=head2 C<goto_top>
X<goto_top>

=over

=item C<my $top = $browser-E<gt>goto_top( );>X<my_top_browser_E_gt_goto_top_>

Because of the hierarchial structure it is difficult to identify an item in
the browser. Instead of passing an identifier to all the calls that can modify
an item, the browser provides several calls to set L<C<item()>|/"item"> based
on various rules, and then calls to modify the current L<C<item()>|/"item">.

This call sets L<C<item()>|/"item"> to the very first visible widget in the
browser. It returns the widget for that item, or null if the browser is empty.

If you have invisible items in the browser you should use
L<C<goto_index(0)>|/"goto_index"> if you want to go to the first item even if
it is invisible.

=for hackers xs/Browser.xs line 384

=back

=head2 C<group_symbol>
X<group_symbol>

=over

=item C<my $g_symbol = $browser-E<gt>group_symbol( );>X<my_g_symbol_browser_E_gt_group_symbol_>

Returns the default value for L<C<image()>|/"image"> on each item that is a
hierarchy parent. If the parent item has no L<C<image()>|/"image"> then this
one is used for it.

=for hackers xs/Browser.xs line 1135

=item C<$browser-E<gt>group_symbol( $symbol );>X<_browser_E_gt_group_symbol_symbol_>

Sets a default value for L<C<image()>|/"image"> on each item that is a
hierarchy parent. If the parent item has no L<C<image()>|/"image"> then this
one is used for it.

=pod 

=for hackers xs/Browser.xs line 1141

=back

=head2 C<header>
X<header>

=over

=item C<my $element = $browser-E<gt>header( $column );>X<my_element_browser_E_gt_header_column_>

Returns the L<Widget|FLTK::Widget> in C<column>, starting from index C<0>. If
C<column>'th column is invalid, C<undef> is returned.

=for hackers xs/Browser.xs line 967

=back

=head2 C<height>
X<height>

=over

=item C<my $h = $browser-E<gt>height( );>X<my_h_browser_E_gt_height_>

The height of all the visible items in the browser, measured in pixels. If
this is changed (by adding or deleting items or opening or closing a parent
item) then L<C<layout()>|/"layout"> must be called before this is correct.

=for hackers xs/Browser.xs line 258

=back

=head2 C<hscrollbar>
X<hscrollbar>

=over

=item C<my $h_sb = $browser-E<gt>hscrollbar( );>X<my_h_sb_browser_E_gt_hscrollbar_>



=for hackers xs/Browser.xs line 366

=back

=head2 C<indented>
X<indented>

=over

=item C<my $is_it = $browser-E<gt>indented( );>X<my_is_it_browser_E_gt_indented_>



=for hackers xs/Browser.xs line 337

=item C<$browser-E<gt>indented( $value );>X<_browser_E_gt_indented_value_>

Turn this on to for space to be reserved for open/close boxes drawn to the
left of top-level items. You usually want this for a hierarchial browser. This
should be off for a flat browser, or to emulate Windows Explorer where "my
computer" does not have an open/close to the left of it. The default value is
false.

=for hackers xs/Browser.xs line 341

=back

=head2 C<item_h>
X<item_h>

=over

=item C<my $h = $browser-E<gt>item_h( );>X<my_h_browser_E_gt_item_h_>

The item height.

=for hackers xs/Browser.xs line 583

=back

=head2 C<item_is_open>
X<item_is_open>

=over

=item C<my $is_open = $browser-E<gt>item_is_open( );>X<my_is_open_browser_E_gt_item_is_open_>

If L<C<item_is_parent()>|/"item_is_parent"> is true, return true if this item
is open. If this is not a parent the result is undefined.

=for hackers xs/Browser.xs line 553

=back

=head2 C<item_is_parent>
X<item_is_parent>

=over

=item C<my $is_parent = $browser-E<gt>item_is_parent( );>X<my_is_parent_browser_E_gt_item_is_parent_>

Return true if the current item is a parent. Notice that it may have zero
children.

=for hackers xs/Browser.xs line 548

=back

=head2 C<item_is_visible>
X<item_is_visible>

=over

=item C<my $is_visible = $browser-E<gt>item_is_visible( );>X<my_is_visible_browser_E_gt_item_is_visible_>

Return true if the item would be visible to the user if the browser was
scrolled to the correct location. This means that the C<FLTK::INVISIBLE> flag
is not set on it, and all parents of it are open and visible as well.

=for hackers xs/Browser.xs line 542

=back

=head2 C<layout>
X<layout>

=over

=item C<$browser-E<gt>layout( );>X<_browser_E_gt_layout_>



=for hackers xs/Browser.xs line 140

=back

=head2 C<leaf_symbol>
X<leaf_symbol>

=over

=item C<my $l_symbol = $browser-E<gt>leaf_symbol( );>X<my_l_symbol_browser_E_gt_leaf_symbol_>

Returns the default value for L<C<image()>|/"image"> on each item that is not
a parent of other items. If the item has no L<C<image()>|/"image"> then this
one is used for it.

=for hackers xs/Browser.xs line 1123

=item C<$browser-E<gt>leaf_symbol( $symbol );>X<_browser_E_gt_leaf_symbol_symbol_>

Sets a default value for L<C<image()>|/"image"> on each item that is not a
parent of other items. If the item has no L<C<image()>|/"image"> then this one
is used for it.

=for hackers xs/Browser.xs line 1129

=back

=head2 C<load>
X<load>

=over

=item C<my $total = $browser-E<gt>load( $filename );>X<my_total_browser_E_gt_load_filename_>



=for hackers xs/Browser.xs line 1105

=back

=head2 C<make_item_visible>
X<make_item_visible>

=over

=item C<my $okay = $browser-E<gt>make_item_visible( $where );>X<my_okay_browser_E_gt_make_item_visible_where_>

This makes the current item visible to the user.

First it turns off the C<FLTK::INVISIBLE> flag on the current item, and turns
off the C<FLTK::INVISIBLE> flag and opens (turning on the C<FLTK::STATE> flag)
all parent items. These flag changes cause
L<C<flags_changed()>|/"flags_changed"> to be called on any
L<FLTK::List|FLTK::List> that you have assigned to the browser.

The browser is then scrolled by calling L<C<yposition()>|/"yposition"> so the
item is visible. The optional argument tells how to scroll. If not specified
(or the default value of L<FLTK::Browser::NOSCROLL|FLTK::Browser/NOSCROLL> is
given) then the browser is scrolled as little as possible to show the item. If
it is L<C<FLTK::Browser::TOP>FLTK::Browser|"TOP"> then the item is put at the
top of the browser. If it is
L<C<FLTK::Browser::MIDDLE>|FLTK::Browser/"MIDDLE"> then the item is centered
vertically in the browser. If it is
L<C<FLTK::Browser::BOTTOM>|FLTK::Browser/"BOTTOM"> then the item is put at the
bottom of the browser.

This does nothing if the current item is C<undef>.

=for hackers xs/Browser.xs line 705

=back

=head2 C<middleline>
X<middleline>

=over

=item C<$browser-E<gt>middleline( $line );>X<_browser_E_gt_middleline_line_>

Convenience function for non-hierarchial browsers. Make the indexed item
visible and scroll to put it in the middle of the browser if it is not already
visible (passes C<NO_SCROLL> to
L<C<make_item_visible()>|/"make_item_visible">.

=for hackers xs/Browser.xs line 1041

=back

=head2 C<multi>
X<multi>

=over

=item C<my $total = $browser-E<gt>multi( );>X<my_total_browser_E_gt_multi_>



=for hackers xs/Browser.xs line 1114

=back

=head2 C<new>
X<new>

=over

=item C<my $self = $browser-E<gt>new( $x, $y, $w, $h, $label );>X<my_self_browser_E_gt_new_x_y_w_h_label_>

Creates a new C<FLTK::Browser> object.

=for hackers xs/Browser.xs line 124

=back

=head2 C<next>
X<next>

=over

=item C<my $next = $browser-E<gt>next( );>X<my_next_browser_E_gt_next_>

Move the current item to the next item. If if is a parent it moves to the
first child. If not a parent, it moves to the next child of it's parent. If it
is the last child it moves to the parent's brother. Repeatedly calling this
will visit every child of the browser. This returns the widget. If the current
widget is the last one this returns C<undef>, but the current widget remains
on the last one.

The L<C<current_position()>|/"current_position"> is NOT set by this! It cannot
be calculated efficiently and would slow down the use of this function for
visiting all items.

=for hackers xs/Browser.xs line 404

=back

=head2 C<next_visible>
X<next_visible>

=over

=item C<my $next = $browser-E<gt>next_visible( );>X<my_next_browser_E_gt_next_visible_>

Move forward to the next visible item (what down-arrow does). This does not
move and returns C<undef> if we are at the bottom.

=for hackers xs/Browser.xs line 417

=back

=head2 C<previous_visible>
X<previous_visible>

=over

=item C<my $prev = $browser-E<gt>previous_visible( );>X<my_prev_browser_E_gt_previous_visible_>

Move backward to previous visible item: This does not move and returns
C<undef> if we are at the top.

=for hackers xs/Browser.xs line 422

=back

=head2 C<scrollbar>
X<scrollbar>

=over

=item C<my $v_sb = $browser-E<gt>scrollbar( );>X<my_v_sb_browser_E_gt_scrollbar_>



=for hackers xs/Browser.xs line 362

=back

=head2 C<select>
X<select>

=over

=item C<my $okay = $browser-E<gt>select( $widget, $value, $do_callback );>X<my_okay_browser_E_gt_select_widget_value_do_callback_>

This is for use by the L<MultiBrowser|FLTK::MultiBrowser> subclass. Select or
deselect an item in parameter, optionally execute a callback (calls
L<C<set_item_selected()>|/"set_item_selected">). This method changes item
position in the tree.

=for hackers xs/Browser.xs line 619

=item C<my $okay = $browser-E<gt>select( $item, $value );>X<my_okay_browser_E_gt_select_item_value_>

Same as goto_index(item),set_item_selected(value), to change the selected
state of an item in a non-hierarchial MultiBrowser. If C<item> is out of range
nothing happens.

Note: This is an FLTK 1.0 emulation method.

=for hackers xs/Browser.xs line 626

=back

=head2 C<select_only_this>
X<select_only_this>

=over

=item C<my $okay = $browser-E<gt>select_only_this( $do_callback );>X<my_okay_browser_E_gt_select_only_this_do_callback_>

Make the given item be the current one. For the
L<MultiBrowser|FLTK::MultiBrowser> subclass this will turn off selection of
all other items and turn it on for this one and also set the focus here. If
the selection changes and C<when()&do_callback> is non-zero, the callback is
done.

For the multibrowser, the callback is done for each item that changes, whether
it turns on or off.

=for hackers xs/Browser.xs line 667

=back

=head2 C<selected>
X<selected>

=over

=item C<my $selected = $browser-E<gt>selected( $line );>X<my_selected_browser_E_gt_selected_line_>

Does C<goto_index(line),item_selected()> to return the selection state of an
item in a non-hierarchial MultiBrowser. If C<line> is out of range it returns
false.

Note: This is an FLTK 1.0 emulation method.

=for hackers xs/Browser.xs line 1000

=back

=head2 C<selected_column>
X<selected_column>

=over

=item C<my $col = $browser-E<gt>selected_column( );>X<my_col_browser_E_gt_selected_column_>

Returns the currently selected column.

=for hackers xs/Browser.xs line 801

=back

=head2 C<set_column_start>
X<set_column_start>

=over

=item C<my $column = $browser-E<gt>set_column_start( $column, $x );>X<my_column_browser_E_gt_set_column_start_column_x_>



=for hackers xs/Browser.xs line 958

=back

=head2 C<set_focus>
X<set_focus>

=over

=item C<my $focused = $browser-E<gt>set_focus( );>X<my_focused_browser_E_gt_set_focus_>

Change the focus (the selected item, or in an
L<FLTK::MultiBrowser|FLTK::MultiBrowser> the item that has a dotted box around
it, to the current item. This calls
L<C<make_item_visible()>|/"make_item_visible">.

=for hackers xs/Browser.xs line 558

=back

=head2 C<set_item_opened>
X<set_item_opened>

=over

=item C<my $okay = $browser-E<gt>set_item_opened( $value );>X<my_okay_browser_E_gt_set_item_opened_value_>

If the current item is a parent, set the open state (the
L<FLTK::STATE|FLTK/"STATE"> flags) to the given value and redraw the browser
correctly. Returns C<true> if the state was actually changed, returns C<false>
if it was already in that state.

=for hackers xs/Browser.xs line 754

=back

=head2 C<set_item_selected>
X<set_item_selected>

=over

=item C<my $okay = $browser-E<gt>set_item_selected( $value, $do_callback );>X<my_okay_browser_E_gt_set_item_selected_value_do_callback_>

This is for use by the L<MultiBrowser|FLTK::MultiBrowser> subclass. Turn the
C<FLTK::SELECTED> flag on or off in the current item (use
L<C<goto_index()>|/"goto_index"> to set the current item before calling this).

If this is not a L<MultiBrowser|FLTK::MultiBrowser>, this does
L<C<select_only_this()>|/"select_only_this"> if C<value> is true, and
L<C<deselect()>|/"deselect"> if \a value is false.

If C<do_callback> has some bits that are also in L<C<when()>|/"when"> then the
callback is done for each item that changes selected state.

=for hackers xs/Browser.xs line 649

=back

=head2 C<set_item_visible>
X<set_item_visible>

=over

=item C<my $okay = $browser-E<gt>set_item_visible( $value );>X<my_okay_browser_E_gt_set_item_visible_value_>

Turn off or on the LC<FLTK::INVISIBLE>|FLTK/"INVISIBLE"> flag on the given
item and redraw the browser if necessary. Returns C<true> if the state was
actually changed, returns C<false> if it was already in that state.

=for hackers xs/Browser.xs line 761

=back

=head2 C<set_mark>
X<set_mark>

=over

=item C<$browser-E<gt>set_mark( $destination );>X<_browser_E_gt_set_mark_destination_>



=for hackers xs/Browser.xs line 599

=back

=head2 C<set_mark_to_focus>
X<set_mark_to_focus>

=over

=item C<$browser-E<gt>set_mark_to_focus( $destination );>X<_browser_E_gt_set_mark_to_focus_destination_>



=for hackers xs/Browser.xs line 603

=back

=head2 C<topline>
X<topline>

=over

=item C<my $line = $browser-E<gt>topline( );>X<my_line_browser_E_gt_topline_>

Convenience function for non-hierarchial browsers. Returns the index if the
top-level item that is at the top of the scrolling window.

=for hackers xs/Browser.xs line 1013

=item C<$browser-E<gt>topline( $line );>X<_browser_E_gt_topline_line_>

Convenience function for non-hierarchial browsers. Make the indexed item
visible and scroll to put it at the top of the browser.

=for hackers xs/Browser.xs line 1018

=back

=head2 C<value>
X<value>

=over

=item C<$browser-E<gt>value( $val );>X<_browser_E_gt_value_val_>

Same as C<goto_index(val);set_focus();>, to change the current item in a
non-hierarchial browser.

=for hackers xs/Browser.xs line 977

=item C<my $val = $browser-E<gt>value( );>X<my_val_browser_E_gt_value_>

Returns C<focus_index(val)[0]>, to get the current item in a non-hierarchial
browser.

=for hackers xs/Browser.xs line 982

=back

=head2 C<width>
X<width>

=over

=item C<my $w = $browser-E<gt>width( );>X<my_w_browser_E_gt_width_>

The width of the longest item in the browser, measured in pixels. If this is
changed (by adding or deleting items or opening or closing a parent item) then
L<C<layout()>|/"layout"> must be called before this is correct.

=for hackers xs/Browser.xs line 252

=back

=head2 C<xposition>
X<xposition>

=over

=item C<my $x = $browser-E<gt>xposition( );>X<my_x_browser_E_gt_xposition_>


=for hackers xs/Browser.xs line 300

=item C<$browser-E<gt>xposition( $x );>X<_browser_E_gt_xposition_x_>

Set the horizontal scrolling position, measured in pixels. Zero is the normal
position where the left edge of the child widgets is visible.

=for hackers xs/Browser.xs line 303

=back

=head2 C<yposition>
X<yposition>

=over

=item C<my $y = $browser-E<gt>yposition( );>X<my_y_browser_E_gt_yposition_>


=for hackers xs/Browser.xs line 308

=item C<$browser-E<gt>yposition( $y );>X<_browser_E_gt_yposition_y_>

Set the vertical scrolling position, measured in pixels. Zero means the top of
the first item is visible. Positive numbers scroll the display up.

=for hackers xs/Browser.xs line 311

=back

=head1 Author

Sanko Robinson <sanko@cpan.org> - http://sankorobinson.com/

=head1 License and Legal

Copyright (C) 2008-2010 by Sanko Robinson <sanko@cpan.org>

This program is free software; you can redistribute it and/or modify it under
the terms of
L<The Artistic License 2.0|http://www.perlfoundation.org/artistic_license_2_0>.
See the F<LICENSE> file included with this distribution or
L<notes on the Artistic License 2.0|http://www.perlfoundation.org/artistic_2_0_notes>
for clarification.

When separated from the distribution, all original POD documentation is
covered by the
L<Creative Commons Attribution-Share Alike 3.0 License|http://creativecommons.org/licenses/by-sa/3.0/us/legalcode>.
See the
L<clarification of the CCA-SA3.0|http://creativecommons.org/licenses/by-sa/3.0/us/>.


=for git $Id: Browser.xs 7483df2 2011-04-09 05:42:22Z sanko@cpan.org $

=cut
